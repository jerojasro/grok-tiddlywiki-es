{
  "title": "$:/sib/SendFeedbackWidget",
  "text": "/*\\\ntitle: action-sendfeedback\ntype: application/javascript\nmodule-type: widget\nAction widget to call an API.\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nlet ENDPOINT = \"https://zaoi8ogjy4.execute-api.us-east-1.amazonaws.com/default/ReceiveGrokTiddlyWikiFeedback\";\n\nfunction gfv(id) {\n\t\treturn document.getElementById(id).value\n}\n\nfunction sendRequest(url, params, callback) {\n\t\tlet xhr = new XMLHttpRequest();\n\t\txhr.open('POST', url, true);\n\t\txhr.responseType = 'json';\n\t\txhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\n\t\txhr.onload = () => {\n\t\t\t\tlet status = xhr.status;\n\t\t\t\tif (status == 200) {\n\t\t\t\t\t\tconsole.log(xhr.response);\n\t\t\t\t\t\tif (xhr.response[\"status\"] == \"success\") {\n\t\t\t\t\t\t\t\tcallback(null, xhr.response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcallback(status, xhr.response);\n\t\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\tcallback(status, xhr.response);\n\t\t\t\t}\n\t\t};\n\n\t\t// Turn the data object into an array of URL-encoded key/value pairs.\n\t\t// https://stackoverflow.com/questions/9713058/send-post-data-using-xmlhttprequest\n\t\tlet urlEncodedDataPairs = [], name;\n\t\tfor (name in params) {\n\t\t\t\turlEncodedDataPairs.push(encodeURIComponent(name) + '=' + encodeURIComponent(params[name]));\n\t\t}\n\t\txhr.send(urlEncodedDataPairs.join('&'))\n};\n\nfunction submitFeedback(tiddler, email, comment, debug) {\n\t\tvar params = new Object();\n\t\tparams.tiddler = tiddler\n\t\tparams.email = email\n\t\tparams.comment = comment\n\t\tparams.debug = debug\n\n\t\tsendRequest(ENDPOINT, params, (err, data) => {\n\t\t\t\tif (err != null) {\n\t\t\t\t\t\talert(\"Error submitting feedback: \" + data.reason);\n\t\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\t\talert(\"Thank you! Your feedback was successfully submitted.\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t});\n}\n\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar FeedbackWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nFeedbackWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nFeedbackWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nFeedbackWidget.prototype.execute = function() {\n\tthis.tiddlerName = this.getAttribute(\"tiddler\");\n\tthis.email = this.getAttribute(\"email\");\n\tthis.comment = this.getAttribute(\"comment\");\n\tthis.debuginfo = this.getAttribute(\"debuginfo\");\n};\n\n/*\nRefresh the widget by ensuring our attributes are up to date\n*/\nFeedbackWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes[\"name\"]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nFeedbackWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\treturn submitFeedback(this.tiddlerName, this.email, this.comment, this.debuginfo);\n};\n\nexports[\"action-sendfeedback\"] = FeedbackWidget;\n\n})();",
  "type": "application/javascript",
  "module-type": "widget",
  "created": "20210102234204312",
  "modified": "20210103023121649",
  "tags": "",
  "human_title": "$:/sib/SendFeedbackWidget"
}