{
  "title": _("Ex:BasicLinksList/answer"),
  "created": "20200718201238626",
  "modified": "20210418142500773",
  "tags": "Answer",
  "type": "text/vnd.tiddlywiki",
  "text": _("My tiddler now looks like this:\n\n```html\n\\define linkDisplay(title, filterFragment)\n$title$:\n\n<ul>\n<$list filter=\"[all[current]$filterFragment$]\">\n  <li><$link /></li>\n</$list>\n</ul>\n\\end\n\n<<linkDisplay \"Links\" \"links[]\">>\n<<linkDisplay \"Backlinks\" \"backlinks[]\">>\n```\n\nLet's talk about `filterFragment` for a moment. The way shown above is the simplest way to handle it, and TiddlyWiki's core does this in a number of macros, but if we didn't want to use [[text substitution|Text Substitution]], or we wanted to be able to reuse this macro in places where we didn't always want just the current tiddler, we could also make the entire filter the parameter to the macro (we'll call it `filterString`) and use parameter substitution instead:\n\n```html\n\\define linkDisplay(title, filterString)\n[\u2026]\n<$list filter=<<__filterString__>>>\n[\u2026]\n```\n\nAnother option would be to use `subfilter`. This filter operator takes an argument which is itself a filter run, and passes the current data into that run. Here's how we could do that:\n\n```html\n\\define linkDisplay(title, filterFragment)\n$title$:\n\n<ul>\n<$list filter=\"[all[current]subfilter<__filterFragment__>]\">\n  <li><$link /></li>\n</$list>\n</ul>\n\\end\n\n<<linkDisplay \"Links\" \"[links[]]\">>\n<<linkDisplay \"Backlinks\" \"[backlinks[]]\">>\n```\n\nTwo things to note here:\n\n* Previously, the `filterFragment` parameter was just a single filter step. Now it has to be a complete filter run.\n* Using macro parameter substitution with `<<__param__>>` is valid inside a filter, so long as you use single angle brackets.\n")
}