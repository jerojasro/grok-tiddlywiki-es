{
  "title": "Ex:MailMerge/answer",
  "created": "20201122235533944",
  "modified": "20220103170507084",
  "tags": "Answer",
  "type": "text/vnd.tiddlywiki",
  "text": _("Most of the supplemental exercises don't have answers, but I can't pose an exercise this tricky without proving that I can implement it! There are almost certainly many, many other ways to achieve the same thing, some of them probably better.\n\nHere's a basic version which uses three tiddlers. It doesn't support multiple recipients on an email, cc:, bcc:, making substitutions in the subject of the email, HTML formatting, special characters requiring URL encoding in the email address, or probably a few other things, but it should satisfy the definition of \u201cmail merge\u201d and so do fine for explanatory purposes.\n\nFirst, the `MailMergeTemplate`. This is specific to the exact mail merge that you're trying to do, and you might have many of them in your wiki and create new ones on the fly. It contains the body of the email, plus transclusions needed to fill in the dynamic parts. It expects the contact to whom the message is being sent to be the current tiddler. Here's an example email:\n\n```html\nHi {{!!title}},\n\nThis is an email to let you know that you've screwed up and owe me $20. Any questions, please contact your boss, {{!!manager}}.\n\nThanks much,\n\nThe Management\n```\n\nNotice that, since this template is arbitrary wikitext, while in this sample we've only transcluded fields that are directly on the contact tiddler, we could also call macros, transclude the values of contact fields through templates, transclude filter outputs, or even use widgets, if we needed to build a more complex message.\n\nNext is the `MailMergeTemplateReader`. The purpose of this tiddler is to take two variables, `templateName` and `merger`, representing the `MailMergeTemplate` to be used and the contact which is being used for this iteration of the mail merge, and output the body text of the email. It should be possible to avoid using this intermediate tiddler, but life is easier with it.\n\n```html\n\\define doTransclude() {{$(merger)$||$(templateName)$}}\n\n<<doTransclude>>\n```\n\nNote that this tiddler, unlike the actual `templateName` template, does //not// need to be transcluded as a template; it can just be transcluded as a normal tiddler as long as the variables are defined. This will be useful in a moment.\n\nFinally, the big kahuna, `MailMerge`. Here it is in one chunk, and then afterwards we'll take it piece by piece.\n\n```html\n\\define concat() mailto:$(contactEmail)$?subject=$(mailtoSubject)$&body=$(bodyPart)$\n\nFilter for Contacts: <$edit-text tiddler=\"$:/temp/mailmergefilter\" tag=\"input\" default=\"\"/>\n\nTemplate: <$edit-text tiddler=\"$:/temp/mailmergetemplate\" tag=\"input\" default=\"\"/>\n\nSubject: <$edit-text tiddler=\"$:/temp/mailmergesubject\" tag=\"input\" default=\"\"/>\n\n<table>\n  <tr>\n    <th>Contact</th>\n    <th>Address</th>\n    <th>Link</th>\n  </tr>\n<$list filter={{$:/temp/mailmergefilter}}>\n  <tr>\n  <td>\n    {{!!title}}\n  </td>\n  <td>\n    {{!!email}}\n  </td>\n  <td>\n    <$let\n      contactEmail={{!!email}}\n      merger=<<currentTiddler>>\n      templateName={{$:/temp/mailmergetemplate}}\n      mailtoSubject={{$:/temp/mailmergesubject}}>\n    <$wikify name=wikified output=formattedtext text={{MailMergeTemplateReader}}>\n    <$set name=bodyPart value={{{ [<wikified>trim[]encodeuri[]] }}}>\n\n      <a class=\"tc-tiddlylink-external\" href=<<concat>>>Email</a>\n\n    </$set>\n    </$wikify>\n    </$let>\n\n  </td>\n  </tr>\n</$list>\n</table>\n```\n\nLet's break this down.\n\n```html\n\\define concat() mailto:$(contactEmail)$?subject=$(mailtoSubject)$&body=$(bodyPart)$\n```\n\nThis macro will put together the actual mailto link from its constituent parts, the contact email, the subject, and the body.\n\n```html\nFilter for Contacts: <$edit-text tiddler=\"$:/temp/mailmergefilter\" tag=\"input\" default=\"\"/>\n\nTemplate: <$edit-text tiddler=\"$:/temp/mailmergetemplate\" tag=\"input\" default=\"\"/>\n\nSubject: <$edit-text tiddler=\"$:/temp/mailmergesubject\" tag=\"input\" default=\"\"/>\n```\n\nThis will let the user define what mail merge is to be carried out: who the recipients are (as a filter), what template to use for the body of the message, and what the subject should be.\n\n```html\n<table>\n  <tr>\n    <th>Contact</th>\n    <th>Address</th>\n    <th>Link</th>\n  </tr>\n```\n\nStart creating a pretty table for the links, including the contacts' names and email addresses so we can quickly check them and make sure they're what we expected.\n\n```html\n<$list filter={{$:/temp/mailmergefilter}}>\n  <tr>\n  <td>\n    {{!!title}}\n  </td>\n  <td>\n    {{!!email}}\n  </td>\n```\n\nFilling in the first two columns is quite straightforward. Note that the list is populated by the filter stored in the temp tiddler associated with the input box the user typed the filter into.\n\n```html\n  <td>\n    <$let\n      contactEmail={{!!email}}\n      merger=<<currentTiddler>>\n      templateName={{$:/temp/mailmergetemplate}}\n      mailtoSubject={{$:/temp/mailmergesubject}}>\n```\n\nNow we're into the complicated table cell, where the mailto link is put together. First, we need to set a few variables:\n\n* The `contactEmail` (the address we're sending this message to, used by the `concat` macro to build the link)\n* The `merger` (the tiddler which should be used to fill out the body template, used by the `MailMergeTemplateReader`)\n* The `templateName` (the template which will be filled out, again populated from the user's temp tiddler, used by the `MailMergeTemplateReader`)\n* The `mailtoSubject` (the subject which the user filled in, used by the `concat` macro to build the link)\n\n```html\n<$wikify name=wikified output=formattedtext text={{MailMergeTemplateReader}}>\n```\n\nHere's the magic. We've seen `$wikify` at least once before, when we [[rendered a small excerpt|Ex:LinkedTiddlerExcerpt]] of various tiddlers as part of [[Creating a List of Links and Backlinks]]. This takes the wikitext of `MailMergeTemplateReader` and converts it into HTML output, making variable substitutions and transclusions just as if TiddlyWiki was displaying the tiddler on the screen. This output is then downconverted to `formattedtext` (text that's not in full HTML, but includes nice things like line breaks). Because of our work in `MailMergeTemplateReader` and the variables we set in the previous snippet, the output contains the appropriate transcluded values for the specific contact being treated in this row of the table (that is, the values have been \"merged\"). We store this output in the variable `wikified`.\n\n```html\n<$set name=bodyPart value={{{ [<wikified>trim[]encodeuri[]] }}}>\n```\n\nWe trim any spaces or line breaks off the beginning and end of our wikified text and URL-encode it, which makes it turn into a bunch of funny percent signs and weird characters that your email program will know how to decode into a message.\n\n```html\n<a class=\"tc-tiddlylink-external\" href=<<concat>>>Email</a>\n```\n\nLastly, we create the link using the `concat` macro, which reads from all the variables we have set so far and smashes them together (concatenates them) to create link text.\n\n```html\n  </$set>\n  </$wikify>\n  </$let>\n\n  </td>\n  </tr>\n</$list>\n</table>\n```\n\nAnd we have a few widgets to close.\n"),
  "human_title": _("Ex:MailMerge/answer")
}