{
  "title": "Filters and Transclusions",
  "created": "20200604030325277",
  "description": "TiddlyWiki can transclude the output of a filter, or transclude a variable or field into a filter.",
  "modified": "20210818210356183",
  "parent": "Variables, Macros, and Transclusions",
  "tags": "Section",
  "type": "text/vnd.tiddlywiki",
  "text": "Filters and transclusions interact in two useful ways:\n\n* We can ''transclude the result of a filter''.\n* We can ''transclude the value of a variable or tiddler field into a filter''.\n\n!! Transcluding the result of a filter\n\nAs we know, we can transclude the `text` field of a tiddler by placing its title in `{{double curly braces}}`. We can transclude the result of a filter expression by placing it in `{{{triple curly braces}}}`; this is sometimes called a ''filtered transclusion''. Here's a filtered transclusion of the names of the alphabetically first five sections in this book:\n\n{{Sn:ChapterFilterTransclusion||MagicSnippet}}\n\n(The `all[tiddlers+shadows]` step is required here and in many live examples to come because of the way //Grok TiddlyWiki// is packaged; in your own wiki, you wouldn't need this step. If you're too curious to wait for the explanation, jump ahead to [[Shadow Tiddlers]].)\n\nThe spaces directly inside the curly braces are not required, but they're highly recommended: if you leave them out, there are so many brackets next to each other that it is nearly impossible to tell whether you've inserted the right number of them.\n\nLet's open up the `MeetingList` tiddler in our example wiki and create a list of meetings using a similar filter:\n\n```html\n{{{ [tag[Meeting]] }}}\n```\n\nYou'll want to put a blank line above and below this line -- otherwise, all the titles will be run together (this is the [[block-versus-inline-mode thing|Block Mode and Inline Mode]] again).\n\nThis is a really quick-and-dirty way of creating a list which can come in handy occasionally, but this syntax is most commonly used when we want to use a filter to create or manipulate some text and include it somewhere, either directly in the body of a tiddler or as an attribute of a widget or HTML tag. For instance, suppose we want to display a count of how many meetings we currently have notes on:\n\n```html\nThere are {{{ [tag[Meeting]count[]] }}} meetings in this wiki.\n```\n\nIf you tweak the filter in your wiki to match this, you'll notice something a little odd, though -- supposing your wiki currently has 2 meetings, 2 is a //link//, to a nonexistent tiddler called `2`. What's up with that?\n\nWell, since filters are mostly designed to work with tiddler titles, when you get the output of a filter, TiddlyWiki assumes each item in the output is a tiddler, so it tries to be helpful and link it. Certain filter operators, however -- like `count[]`, or `get[]` -- will break this assumption. Fortunately, if you're fussy about having pointless links show up, overriding the default is easy -- we simply use the `$text` widget, which tells TiddlyWiki that we want something to be treated as plain text rather than wikitext:\n\n```html\nThere are <$text text={{{ [tag[Meeting]count[]] }}} /> meetings in this wiki.\n```\n\n\n!! Transcluding things into a filter\n\nThe dynamic lists we've created so far are nice, but they've had a significant limitation: no part of the filter can change unless we go in and edit it. Often, we might like to be able to ''make part of the filter a value that changes'', like a field or a variable.\n\nLet's think back to the [[exercise|Ex:JaneManagerPhone]] where we included Jane's manager's phone number in the `JaneDoe` tiddler (we've since moved this bit onto the `ContactInformationTemplate`). Suppose that instead of the phone number of the person's manager, we want to list the names and phone numbers of all people listed in the `family` field.\n\nAt first, this seems pretty straightforward:\n\n```html\n<ul>\n\t<$list filter=\"some filter\">\n\t\t<li>{{!!title}}: {{!!phone}}</li>\n\t</$list>\n</ul>\n```\n\nBut what do we put as the filter to retrieve the contents of the `family` field? We can't directly name the tiddler we want to retrieve the field from (e.g., `JaneDoe`), since this snippet would then only work in Jane's tiddler. Instead, we need to refer to a value on the [[current tiddler|Templates and the Current Tiddler]] somehow. Our first thought might be to define a macro, like we did in the manager exercise:\n\n```html\n\\define myfilt(people)\n[enlist[$people$]]\n\\end\n```\n\nThe `enlist` filter operator takes a list field, with values separated by spaces or wrapped in `[[double square brackets]]`, and splits it apart into individual tiddler names. If we left `enlist` out, then we'd be looking for a tiddler called `JohnDoe EmilyDoe` (the exact text that's in the `family` field of the `JaneDoe` tiddler), instead of the two tiddlers `JohnDoe` and `EmilyDoe` (what we meant).\n\nOK, now let's just pass the results of calling that macro to the `$list` widget:\n\n```html\n<$list filter=<<myfilt ...>> >\n```\n\nWait a sec\u2026how do we call `myfilt` with the value of the `family` field? `<<myfilt {{!!family}}>>` sounds nice, but isn't valid. We have to use a `$macrocall` widget to pass transclusions as parameters to a macro. But sadly, this isn't valid syntax either:\n\n```html\n<$list filter=<$macrocall $name=\"myfilt\" people={{!!family}}/>>\n```\n\nYou can't put a widget inside an attribute of another widget. We could turn the result of the macro call into a variable that we could pass to the `filter` attribute of the `$list` widget:\n\n```html\n<$set name=filtersnippet value=...\n```\n\n\u2026Wait, same problem! Dang it!\n\nThere is in fact a way to solve this problem with macros; we'll learn how to do it in [[Using Variables in Macros]]. But it should be clear that using a macro here is a whole lot more work than we want to deal with. All we really want is to pass the contents of the `family` field into the `enlist` operator.\n\nHere's the syntax that allows us to do that.\n\n```html\n<ul>\n\t<$list filter=\"[enlist{!!family}]\">\n\t\t<li>{{!!title}}: {{!!phone}}</li>\n\t</$list>\n</ul>\n```\n\nNotice that there is only ''one set of curly braces'' in the filter expression, rather than two, just like there is only one set of square brackets in their place if you're providing a value that doesn't change.\n\nIf the value we wanted to use was in a variable rather than a tiddler field, we could use single angle brackets:\n\n```html\n<ul>\n\t<$set name=\"familyfield\" value={{!!family}}>\n\t\t<$list filter=\"[enlist<familyfield>]\">\n\t\t\t<li>{{!!title}}: {{!!phone}}</li>\n\t\t</$list>\n\t</$set>\n</ul>\n```\n\nCurly braces or angle brackets can be used by themselves, not preceded by an operator, to directly introduce an arbitrary value into the filter pipeline. This is the equivalent of specifying a literal title with square brackets:\n\n{{Sn:DirectAngleBrace||MagicSnippet}}\n\nLastly, you can also transclude the result of macro calls with constant parameters into a filter:\n\n{{Sn:MacroCallTransclusion||MagicSnippet}}\n\nSometimes a filter parameter that is transcluded into the filter with `{braces}` or `<angle brackets>` is called a ''soft parameter'', in contrast to an unchanging ''hard parameter'' specified with `[square brackets]`.\n\n\n!! Side note\n\nActually, there's an even easier if not immediately intuitive way to make the family list, and this would likely be what you'd want to do in a real-world situation:\n\n```html\n<ul>\n\t<$list filter={{!!family}}>\n\t\t<li>{{!!title}}: {{!!phone}}</li>\n\t</$list>\n</ul>\n```\n\nThat may look weird right now, but when we get to [[Multi-Run Filters]], you'll understand why this works. For now, this is more a curiosity than anything else; it certainly won't work in all situations in which you might want to substitute a field or variable value into a filter, so what we learned above is still important.\n\n\n!! Exercises\n\n{{Ex:TiddlersContainingWikiTitle||ExerciseTemplate}}\n{{Ex:AllFamilyInformation||ExerciseTemplate}}\n{{Ex:WikipediaLinkWithoutMacro||ExerciseTemplate}}\n{{Ex:WikipediaLinkTemplate||ExerciseTemplate}}\n{{Ex:DefaultToField||ExerciseTemplate}}\n{{Ex:WikiStatistics||ExerciseTemplate}}\n\n\n!! Takeaways\n\n{{||TakeawaysTemplate}}\n"
}